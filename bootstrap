#!/usr/bin/env bash
set -e
#
# This script allows you to install openbaton. To execute it:
#
# 'curl -fsSkL http://get.openbaton.org/bootstrap | bash'

_tag="tags/1.0"


export DEBIAN_FRONTEND=noninteractive
_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

_openbaton_base_repo="https://github.com/openbaton/NFVO.git"
_openbaton_generic_vnfm_repo="https://github.com/openbaton/generic-vnfm.git"
_openbaton_plugins="http://get.openbaton.org/plugins/stable/"

_base=/opt
_openbaton_base="${_base}/openbaton"
_openbaton_conf="/etc/openbaton"
_openbaton_log="/var/log/openbaton"
_nfvo="${_openbaton_base}/nfvo"
_nfvo_vim_drivers="${_nfvo}/plugins/vim-drivers"
_generic_vnfm="${_openbaton_base}/generic-vnfm"

_installer_folder="${_base}/tmp"
_logfile="${_installer_folder}/log"
_tmpfolder=`mktemp -d`

_user="$(id -un 2>/dev/null || true)"

function checkBinary {
  echo -n " * Checking for '$1'..."
  if command -v $1 >/dev/null 2>&1; then
     echo "OK"
     return 0
   else
     echo >&2 "FAILED."
     return 1
   fi
}

_ex='sh -c'
if [ "$_user" != 'root' ]; then
    if checkBinary sudo; then
        _ex='sudo -E sh -c'
    elif checkBinary su; then
        _ex='su -c'
    fi
fi

function prereq(){
    # TODO differentiate between fedora, OS X, ubuntu..
    $_ex 'apt-get update; apt-get -y install openjdk-7-jdk curl wget screen git'
}


function installMessageQueue() {
    echo "installing message queue.."
    $_ex 'apt-get install -y rabbitmq-server'
    ulimit -S -n 4096
    $_ex 'rabbitmqctl add_user admin openbaton'
    $_ex 'rabbitmqctl set_user_tags admin administrator'
    $_ex 'rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"'
    $_ex 'rabbitmq-plugins enable rabbitmq_management'
    $_ex 'service rabbitmq-server restart'
    if [ $? -ne 0 ]; then
      echo "ERROR: rabbitmq is not running properly (check the problem in /var/log/rabbitmq)"
      exit 1
    fi
}

function checkEnvironment {
  _error=0
  echo "Checking environment..."
  checkBinary java; _error=$(($_error + $?))
  checkBinary javac; _error=$(($_error + $?))
  checkBinary curl; _error=$(($_error + $?))
  checkBinary screen; _error=$(($_error + $?))
  checkBinary wget; _error=$(($_error + $?))
  if [ "0" != "$_error" ]; then
    echo >&2 "FAILED. Please install the above mentioned binaries."
    exit 1
  fi
}


function createOpenBatonBase {
    echo "Creating the OpenBaton base folder"
    # removing it if exists
    $_ex 'rm -rf '$_openbaton_base
    $_ex 'mkdir -p '$_nfvo
    $_ex 'chown -R '"$_user $_openbaton_base"
}

function createOpenBatonLog {
    echo "Creating the OpenBaton log folder"
    # removing it if exists
    $_ex 'rm -rf '$_openbaton_log
    $_ex 'mkdir -p '$_openbaton_log
    $_ex 'chown -R '"$_user $_openbaton_log"
}

function checkoutOpenBaton {
    echo "Getting OpenBaton..."
    createOpenBatonBase
    createOpenBatonLog
    git clone --recursive "${_openbaton_base_repo}" "${_nfvo}"
    pushd "${_nfvo}"
    git checkout ${_tag}
    popd
    $_ex 'rm -rf '"${_openbaton_conf}; mkdir -p ${_openbaton_conf}"
    $_ex 'cp '"${_nfvo}/etc/openbaton.properties ${_openbaton_conf}/openbaton.properties"
}


function downloadPlugins {
    echo "Getting OpenBaton Plugins..."
    wget -nH --cut-dirs 2 -r --no-parent  --reject "index.html*" "${_openbaton_plugins}" -P "${_tmpfolder}"
    cp -r ${_tmpfolder}/* "${_nfvo_vim_drivers}"
}


function promptSetProperties {
  read -p "Enter the rabbitmq broker ip [localhost]: " brokerIp
  export brokerIp=$brokerIp
  if [[ $brokerIp != "" ]]; then
      $_ex 'sed -i "s/nfvo.rabbit.brokerIp = localhost/nfvo.rabbit.brokerIp = $brokerIp/g" /etc/openbaton/openbaton.properties'
  fi

  read -p "Enter the rabbitmq management port [15672]: " managementPort
  export managementPort=$managementPort
  if [[ $managementPort != "" ]]; then
    $_ex 'sed -i "s/nfvo.rabbit.management.port = 15672/nfvo.rabbit.management.port = $managementPort/g" /etc/openbaton/openbaton.properties'
  fi

  read -p "Do you want to enable security [N/y]: " security
  export security=$security
  if [[ $security != "" ]]; then
     if [ $security = "y" -o $security = "Y" -o $security = "yes" ]; then
       $_ex 'sed -i "s/# nfvo.security.enabled = true/nfvo.security.enabled = true/g" /etc/openbaton/openbaton.properties'
     fi
  fi
}

function checkoutGenericVNFM {
    echo "Getting generic-vnfm..."
    git clone --recursive "${_openbaton_generic_vnfm_repo}" "${_generic_vnfm}"
    pushd "${_generic_vnfm}"
    git checkout ${_tag}
    popd
}


function compileNFVO {
    echo "compiling the NFVO"
    pushd "${_nfvo}"
    ./openbaton.sh compile
    if [ $? -ne 0 ]; then
        echo "ERROR: The compilation of the NFVO failed"
        exit 1
    fi
    popd
}

function startNFVO {
    echo "starting the NFVO"
    pushd ${_nfvo}
    ./openbaton.sh start
    popd
}

function deployOpenBaton {
    compileNFVO
    startNFVO
}

function compileGenericVNFM {
    echo "compiling the generic VNFM"
    pushd "${_generic_vnfm}"
    ./generic-vnfm.sh compile
    if [ $? -ne 0 ]; then
        echo "ERROR: The compilation of the Generic VNFM failed"
        exit 1
    fi
    popd
}

function startGenericVNFM {
    echo "starting the generic VNFM"
    pushd ${_generic_vnfm}
    ./generic-vnfm.sh start
    popd
}

function deployGenericVNFM {
    compileGenericVNFM
    startGenericVNFM
}


function bootstrap {
    # install prerq
    prereq
    # checkout OpenBaton
    checkoutOpenBaton
    # moved message queue installation part
    downloadPlugins
    # moved message queue installation part
    installMessageQueue
    # check if all the required libraries are available
    checkEnvironment
    # checkout the generic VNFM code
    checkoutGenericVNFM
    # prompting properties
    promptSetProperties
    # deploy and compile OpenBaton orchestrator
    deployOpenBaton
    # deploy and compile the Generic VNFM
    deployGenericVNFM
    echo "Now open http://localhost:8080/"

}

bootstrap
